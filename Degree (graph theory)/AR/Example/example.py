def Naive(a, b):
    # نحسب ناتج a × b باستخدام الجمع المتكرر عبر حلقة while
    
    # ╔═══════════════╦════════════════════════════════════╗
    # ║ المتغير       ║ الوصف                             ║
    # ╠═══════════════╬════════════════════════════════════╣
    # ║ a             ║ عداد التكرار ← كم مرة نجمع b      ║
    # ║ b             ║ العدد الثابت الذي نُكرره في الجمع ║
    # ║ z             ║ الناتج ← يبدأ من 0 ويتزايد كل مرة ║
    # ╚═══════════════╩════════════════════════════════════╝
    
    z = 0  # البداية: z₀ = 0
    
    # ┌──────────────[ بداية الحلقة ]──────────────┐
    # │  طالما a > 0:                               │
    # │     z = z + b      ←  zₙ₊₁ = zₙ + b         │
    # │     a = a - 1       ←  نقلل العداد a        │
    # └─────────────────────────────────────────────┘
    
    while a > 0:
        # 🧮 العملية:
        #    z  →  z + b
        #    a  →  a - 1
        z = z + b
        a = a - 1
    
        # 📊 مثال تخيلي للتكرار:
        #    قبل:  [z = 4]  [a = 2]  [b = 2]
        #    بعد : [z = 6]  [a = 1]  [b = 2]
        #
        #    شكل العملية:
        #    ┌──────────────┐
        #    │ z = z + b    │   ← تجمع b على z
        #    │ a = a - 1    │   ← تقلل عدد التكرارات
        #    └──────────────┘
    
    # ⛳ بعد انتهاء الحلقة (عندما a = 0):
    # z أصبح يساوي: b + b + ... (a مرة) = a × b
    return z

# مثال: نحسب 3 × 2
# z سيتحول بهذا الشكل: 0 → 2 → 4 → 6
result = Naive(3, 2)
print(result)  # Output: 6
